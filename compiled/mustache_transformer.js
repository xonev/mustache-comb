// Generated by CoffeeScript 1.3.3
(function() {
  var MustacheState, MustacheTransformer, Stream,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Stream = require('stream');

  MustacheState = require('./mustache_state.coffee').MustacheState;

  MustacheTransformer = (function(_super) {

    __extends(MustacheTransformer, _super);

    function MustacheTransformer() {
      return MustacheTransformer.__super__.constructor.apply(this, arguments);
    }

    MustacheTransformer.prototype.writableStream = null;

    MustacheTransformer.prototype.currentData = '';

    MustacheTransformer.prototype.currentIndex = 0;

    MustacheTransformer.prototype.writable = true;

    MustacheTransformer.prototype.readable = true;

    MustacheTransformer.prototype.mustacheStateStack = [];

    MustacheTransformer.prototype.write = function(data) {
      this.filterData("" + this.currentData + data);
      if (this.mustacheStateStack.length === 0) {
        return this.flushData(this.currentData);
      }
    };

    MustacheTransformer.prototype.end = function() {
      if (this.currentData) {
        this.flushData(this.currentData);
      }
      if (this.writableStream) {
        return this.writableStream.end();
      }
    };

    MustacheTransformer.prototype.flushData = function(data) {
      this.emit('data', data);
      this.currentIndex = 0;
      return this.currentData = '';
    };

    MustacheTransformer.prototype.pipe = function(stream) {
      this.writableStream = stream;
      return MustacheTransformer.__super__.pipe.apply(this, arguments);
    };

    MustacheTransformer.prototype.filterData = function(data) {
      var i, mustacheState, state, _i, _ref, _ref1, _results,
        _this = this;
      this.currentData = data;
      console.log(this.currentIndex);
      if (this.mustacheStateStack.length > 0) {
        state = this.mustacheStateStack.pop();
        state.currentString = data;
        return state["continue"](this.currentIndex);
      } else {
        _results = [];
        for (i = _i = _ref = this.currentIndex, _ref1 = data.length; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
          this.currentIndex = i;
          if (data[i] === '{') {
            this.startIndex = i;
            mustacheState = new MustacheState;
            mustacheState.on('accept', function(acceptState) {
              _this.currentData = [_this.currentData.slice(0, _this.startIndex), _this.currentData.slice(acceptState.index + 1)].join('');
              _this.currentIndex = _this.startIndex;
              return _this.filterData(_this.currentData);
            });
            mustacheState.on('reject', function(rejectState) {
              _this.currentIndex = rejectState.index + 1;
              return _this.filterData(_this.currentData);
            });
            mustacheState.on('unknown', function(unknownState) {
              _this.currentIndex = unknownState.index;
              return _this.mustacheStateStack.push(mustacheState);
            });
            mustacheState.process(data, this.currentIndex);
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };

    return MustacheTransformer;

  })(Stream);

  exports.MustacheTransformer = MustacheTransformer;

}).call(this);
