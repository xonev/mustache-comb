// Generated by CoffeeScript 1.3.3
(function() {
  var MustacheTransformer, Stream,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Stream = require('stream');

  MustacheTransformer = (function(_super) {

    __extends(MustacheTransformer, _super);

    function MustacheTransformer() {
      return MustacheTransformer.__super__.constructor.apply(this, arguments);
    }

    MustacheTransformer.prototype.writableStream = null;

    MustacheTransformer.prototype.currentData = '';

    MustacheTransformer.prototype.currentIndex = 0;

    MustacheTransformer.prototype.writable = true;

    MustacheTransformer.prototype.readable = true;

    MustacheTransformer.prototype.write = function(data) {
      data = this.filterData("" + this.currentData + (data.toString()));
      if (!this.possibleMatchOnBoundary(data)) {
        this.currentData = '';
        this.flushData(data);
      } else {
        this.currentData = data;
      }
      return true;
    };

    MustacheTransformer.prototype.end = function() {
      if (this.currentData) {
        this.flushData(this.currentData);
      }
      if (this.writableStream) {
        return this.writableStream.end();
      }
    };

    MustacheTransformer.prototype.flushData = function(data) {
      return this.emit('data', data);
    };

    MustacheTransformer.prototype.pipe = function(stream) {
      this.writableStream = stream;
      return MustacheTransformer.__super__.pipe.apply(this, arguments);
    };

    MustacheTransformer.prototype.filterData = function(data) {
      return data.replace(this.tagRegex, '');
    };

    MustacheTransformer.prototype.possibleMatchOnBoundary = function(data) {
      if (data.match(this.incompleteEndTagRegex)) {
        return true;
      } else if (data.match(this.openBraceRegex)) {
        return true;
      } else {
        return false;
      }
    };

    return MustacheTransformer;

  })(Stream);

  exports.MustacheTransformer = MustacheTransformer;

}).call(this);
